b main
run <input.in 
n
q
b main
r <input.in 
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
print BUFOR1
q
run <input.in 
n
run <input.in 
run <input.in 
q
run <input.in 
print iterator
print iterator->actual_element 
print iterator->actual_element->value 
print iterator->actual_element
q
b parser.c:43
run <input.in 
c
s
s
s
s
n
n
n
n
n
n
n
n
n
n
print num
s
n
n
n
n
n
n
n
n
n
print to_check
n
print prefix
n
print pref_len
n
n
n
n
n
n
n
n
n
n
print tree->longest_key
print tree->longest_key_buffer 
n
n
n
n
n
n
q
b parser.c:43
run <input.in 
c
s
n
n
n
k
run <input.in 
c
s
n
n
s
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
s
print buf_first_free_index 
print tree->longest_key_buffer 
n
n
n
n
print tree->longest_key_buffer 
s
n
n
n
print rev_element 
print rev_element->next 
print rev_element->previous 
print rev_element->previous->previous 
print rev_element->previous->previous->previous 
n
n
s
print node
print key
print tree->root->children 
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
print node->father->children 
print node->father->father->children 
n
n
n
s
s
print node->father 
print node->father->children[index]
print node
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
print node->children 
n
n
n
stack
help
frame 1
frame 2
print father
print father->children 
print father->children[3]
print father->children[3].edge_etiquette 
frame 1
print *to_extend
frame 2
print father->children[my_index_at_father]
print my_index_at_father 
print father->children 
print node_children 
print old_child_count 
print node
print father->children 
print my_index_at_father 
k
q
